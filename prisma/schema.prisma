generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  passwordHash    String
  title           String?
  name            String?
  avatarUrl       String?
  isEmailVerified Boolean   @default(false)
  role            String    @default("user")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  profile         Profile?
  auth            Session[]
  Token           Token[]
  kids            Kid[]

  @@map("users")
}

model Kid {
  id        String  @id @default(uuid())
  name      String?
  avatarUrl String?

  parentId  String
  parent    User     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("kids")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, token])
  @@map("sessions")
}

// this can be verification token, password reset token, otp, etc
model Token {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  type      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, type])
  @@index([userId, token])
  @@map("tokens")
}

model Profile {
  id                String   @id @default(uuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique
  explicitContent   Boolean  @default(true)
  maxScreenTimeMins Int?
  language          String? // Preferred language
  country           String? // Preferred language
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("profiles")
}
