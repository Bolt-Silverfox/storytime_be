name: Deploy to EC2 for develop branch

on:
  push:
    branches: [ 'develop-v*.*.*' ]
  pull_request:
    branches: [ 'develop-v*.*.*' ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: development
    env:
      DATABASE_URL: ${{ vars.DATABASE_URL }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10 
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build
      run: pnpm make-migration && pnpm prisma:generate && pnpm build
    
    # - name: Run tests
    #   run: pnpm test
    
    - name: Deploy to EC2
      if: startsWith(github.ref, 'refs/heads/develop-v')
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          mkdir -p /home/ec2-user/deploy/documents-service
          exit 0
    - name: Rsync files to EC2
      if: startsWith(github.ref, 'refs/heads/develop-v')
      run: |
        rsync -avz --delete --exclude='.git' --exclude='node_modules' --exclude='.github' --exclude='.env' \
          -e "ssh -i ${{ secrets.EC2_SSH_KEY }} -o StrictHostKeyChecking=no" \
          ./ ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/ec2-user/deploy/documents-service/
    - name: Install and restart on EC2
      if: startsWith(github.ref, 'refs/heads/develop-v')
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ec2-user/deploy/documents-service
          pnpm install --frozen-lockfile
          pnpm prisma:pull
          pnpm prisma:generate
          pnpm build
          pm2 restart documents-service || pm2 start dist/main.js --name documents-service 